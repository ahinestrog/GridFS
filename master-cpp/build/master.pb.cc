// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#include "master.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gridfs {
PROTOBUF_CONSTEXPR PutPlanRequest::PutPlanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/int64_t{0}
  , /*decltype(_impl_.block_size_)*/0
  , /*decltype(_impl_.replication_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutPlanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutPlanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutPlanRequestDefaultTypeInternal() {}
  union {
    PutPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutPlanRequestDefaultTypeInternal _PutPlanRequest_default_instance_;
PROTOBUF_CONSTEXPR PutPlanResponse::PutPlanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assignments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutPlanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutPlanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutPlanResponseDefaultTypeInternal() {}
  union {
    PutPlanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutPlanResponseDefaultTypeInternal _PutPlanResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPlanRequest::GetPlanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPlanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlanRequestDefaultTypeInternal() {}
  union {
    GetPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlanRequestDefaultTypeInternal _GetPlanRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPlanResponse::GetPlanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPlanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlanResponseDefaultTypeInternal() {}
  union {
    GetPlanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlanResponseDefaultTypeInternal _GetPlanResponse_default_instance_;
}  // namespace gridfs
static ::_pb::Metadata file_level_metadata_master_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_master_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_master_2eproto = nullptr;

const uint32_t TableStruct_master_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanRequest, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanRequest, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanRequest, _impl_.block_size_),
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanRequest, _impl_.replication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::PutPlanResponse, _impl_.assignments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::GetPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::GetPlanRequest, _impl_.filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::GetPlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::GetPlanResponse, _impl_.locations_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gridfs::PutPlanRequest)},
  { 10, -1, -1, sizeof(::gridfs::PutPlanResponse)},
  { 17, -1, -1, sizeof(::gridfs::GetPlanRequest)},
  { 24, -1, -1, sizeof(::gridfs::GetPlanResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gridfs::_PutPlanRequest_default_instance_._instance,
  &::gridfs::_PutPlanResponse_default_instance_._instance,
  &::gridfs::_GetPlanRequest_default_instance_._instance,
  &::gridfs::_GetPlanResponse_default_instance_._instance,
};

const char descriptor_table_protodef_master_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014master.proto\022\006gridfs\032\014common.proto\"]\n\016"
  "PutPlanRequest\022\020\n\010filename\030\001 \001(\t\022\020\n\010file"
  "size\030\002 \001(\003\022\022\n\nblock_size\030\003 \001(\005\022\023\n\013replic"
  "ation\030\004 \001(\005\"\?\n\017PutPlanResponse\022,\n\013assign"
  "ments\030\001 \003(\0132\027.gridfs.BlockAssignment\"\"\n\016"
  "GetPlanRequest\022\020\n\010filename\030\001 \001(\t\";\n\017GetP"
  "lanResponse\022(\n\tlocations\030\001 \003(\0132\025.gridfs."
  "BlockLocation2\207\001\n\rMasterService\022:\n\007PutPl"
  "an\022\026.gridfs.PutPlanRequest\032\027.gridfs.PutP"
  "lanResponse\022:\n\007GetPlan\022\026.gridfs.GetPlanR"
  "equest\032\027.gridfs.GetPlanResponse2P\n\017Maste"
  "rHeartbeat\022=\n\014StreamStatus\022\023.gridfs.Hear"
  "tbeatKv\032\024.gridfs.HeartbeatAck(\0010\001b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_master_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_master_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_master_2eproto = {
    false, false, 521, descriptor_table_protodef_master_2eproto,
    "master.proto",
    &descriptor_table_master_2eproto_once, descriptor_table_master_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_master_2eproto::offsets,
    file_level_metadata_master_2eproto, file_level_enum_descriptors_master_2eproto,
    file_level_service_descriptors_master_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_master_2eproto_getter() {
  return &descriptor_table_master_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_master_2eproto(&descriptor_table_master_2eproto);
namespace gridfs {

// ===================================================================

class PutPlanRequest::_Internal {
 public:
};

PutPlanRequest::PutPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.PutPlanRequest)
}
PutPlanRequest::PutPlanRequest(const PutPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutPlanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.block_size_){}
    , decltype(_impl_.replication_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filesize_, &from._impl_.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replication_) -
    reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.replication_));
  // @@protoc_insertion_point(copy_constructor:gridfs.PutPlanRequest)
}

inline void PutPlanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filesize_){int64_t{0}}
    , decltype(_impl_.block_size_){0}
    , decltype(_impl_.replication_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutPlanRequest::~PutPlanRequest() {
  // @@protoc_insertion_point(destructor:gridfs.PutPlanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void PutPlanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.PutPlanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  ::memset(&_impl_.filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.replication_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.replication_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutPlanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.PutPlanRequest.filename"));
        } else
          goto handle_unusual;
        continue;
      // int64 filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 replication = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutPlanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.PutPlanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.PutPlanRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_filesize(), target);
  }

  // int32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_block_size(), target);
  }

  // int32 replication = 4;
  if (this->_internal_replication() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_replication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.PutPlanRequest)
  return target;
}

size_t PutPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.PutPlanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filesize());
  }

  // int32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_size());
  }

  // int32 replication = 4;
  if (this->_internal_replication() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replication());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutPlanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutPlanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutPlanRequest::GetClassData() const { return &_class_data_; }


void PutPlanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutPlanRequest*>(&to_msg);
  auto& from = static_cast<const PutPlanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.PutPlanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_replication() != 0) {
    _this->_internal_set_replication(from._internal_replication());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutPlanRequest::CopyFrom(const PutPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.PutPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutPlanRequest::IsInitialized() const {
  return true;
}

void PutPlanRequest::InternalSwap(PutPlanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutPlanRequest, _impl_.replication_)
      + sizeof(PutPlanRequest::_impl_.replication_)
      - PROTOBUF_FIELD_OFFSET(PutPlanRequest, _impl_.filesize_)>(
          reinterpret_cast<char*>(&_impl_.filesize_),
          reinterpret_cast<char*>(&other->_impl_.filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutPlanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_master_2eproto_getter, &descriptor_table_master_2eproto_once,
      file_level_metadata_master_2eproto[0]);
}

// ===================================================================

class PutPlanResponse::_Internal {
 public:
};

void PutPlanResponse::clear_assignments() {
  _impl_.assignments_.Clear();
}
PutPlanResponse::PutPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.PutPlanResponse)
}
PutPlanResponse::PutPlanResponse(const PutPlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutPlanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assignments_){from._impl_.assignments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gridfs.PutPlanResponse)
}

inline void PutPlanResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.assignments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PutPlanResponse::~PutPlanResponse() {
  // @@protoc_insertion_point(destructor:gridfs.PutPlanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutPlanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assignments_.~RepeatedPtrField();
}

void PutPlanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutPlanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.PutPlanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assignments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutPlanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gridfs.BlockAssignment assignments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutPlanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.PutPlanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gridfs.BlockAssignment assignments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assignments_size()); i < n; i++) {
    const auto& repfield = this->_internal_assignments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.PutPlanResponse)
  return target;
}

size_t PutPlanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.PutPlanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gridfs.BlockAssignment assignments = 1;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->_impl_.assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutPlanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutPlanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutPlanResponse::GetClassData() const { return &_class_data_; }


void PutPlanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutPlanResponse*>(&to_msg);
  auto& from = static_cast<const PutPlanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.PutPlanResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assignments_.MergeFrom(from._impl_.assignments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutPlanResponse::CopyFrom(const PutPlanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.PutPlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutPlanResponse::IsInitialized() const {
  return true;
}

void PutPlanResponse::InternalSwap(PutPlanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assignments_.InternalSwap(&other->_impl_.assignments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutPlanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_master_2eproto_getter, &descriptor_table_master_2eproto_once,
      file_level_metadata_master_2eproto[1]);
}

// ===================================================================

class GetPlanRequest::_Internal {
 public:
};

GetPlanRequest::GetPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.GetPlanRequest)
}
GetPlanRequest::GetPlanRequest(const GetPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gridfs.GetPlanRequest)
}

inline void GetPlanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPlanRequest::~GetPlanRequest() {
  // @@protoc_insertion_point(destructor:gridfs.GetPlanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void GetPlanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.GetPlanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.GetPlanRequest.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.GetPlanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.GetPlanRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.GetPlanRequest)
  return target;
}

size_t GetPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.GetPlanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlanRequest::GetClassData() const { return &_class_data_; }


void GetPlanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlanRequest*>(&to_msg);
  auto& from = static_cast<const GetPlanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.GetPlanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlanRequest::CopyFrom(const GetPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.GetPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlanRequest::IsInitialized() const {
  return true;
}

void GetPlanRequest::InternalSwap(GetPlanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_master_2eproto_getter, &descriptor_table_master_2eproto_once,
      file_level_metadata_master_2eproto[2]);
}

// ===================================================================

class GetPlanResponse::_Internal {
 public:
};

void GetPlanResponse::clear_locations() {
  _impl_.locations_.Clear();
}
GetPlanResponse::GetPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.GetPlanResponse)
}
GetPlanResponse::GetPlanResponse(const GetPlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){from._impl_.locations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gridfs.GetPlanResponse)
}

inline void GetPlanResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPlanResponse::~GetPlanResponse() {
  // @@protoc_insertion_point(destructor:gridfs.GetPlanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locations_.~RepeatedPtrField();
}

void GetPlanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.GetPlanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gridfs.BlockLocation locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.GetPlanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gridfs.BlockLocation locations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.GetPlanResponse)
  return target;
}

size_t GetPlanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.GetPlanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gridfs.BlockLocation locations = 1;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->_impl_.locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlanResponse::GetClassData() const { return &_class_data_; }


void GetPlanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlanResponse*>(&to_msg);
  auto& from = static_cast<const GetPlanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.GetPlanResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locations_.MergeFrom(from._impl_.locations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlanResponse::CopyFrom(const GetPlanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.GetPlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlanResponse::IsInitialized() const {
  return true;
}

void GetPlanResponse::InternalSwap(GetPlanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locations_.InternalSwap(&other->_impl_.locations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_master_2eproto_getter, &descriptor_table_master_2eproto_once,
      file_level_metadata_master_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gridfs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gridfs::PutPlanRequest*
Arena::CreateMaybeMessage< ::gridfs::PutPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::PutPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::PutPlanResponse*
Arena::CreateMaybeMessage< ::gridfs::PutPlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::PutPlanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::GetPlanRequest*
Arena::CreateMaybeMessage< ::gridfs::GetPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::GetPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::GetPlanResponse*
Arena::CreateMaybeMessage< ::gridfs::GetPlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::GetPlanResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
