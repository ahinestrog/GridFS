// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_master_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_master_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_master_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_master_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_master_2eproto;
namespace gridfs {
class GetPlanRequest;
struct GetPlanRequestDefaultTypeInternal;
extern GetPlanRequestDefaultTypeInternal _GetPlanRequest_default_instance_;
class GetPlanResponse;
struct GetPlanResponseDefaultTypeInternal;
extern GetPlanResponseDefaultTypeInternal _GetPlanResponse_default_instance_;
class PutPlanRequest;
struct PutPlanRequestDefaultTypeInternal;
extern PutPlanRequestDefaultTypeInternal _PutPlanRequest_default_instance_;
class PutPlanResponse;
struct PutPlanResponseDefaultTypeInternal;
extern PutPlanResponseDefaultTypeInternal _PutPlanResponse_default_instance_;
}  // namespace gridfs
PROTOBUF_NAMESPACE_OPEN
template<> ::gridfs::GetPlanRequest* Arena::CreateMaybeMessage<::gridfs::GetPlanRequest>(Arena*);
template<> ::gridfs::GetPlanResponse* Arena::CreateMaybeMessage<::gridfs::GetPlanResponse>(Arena*);
template<> ::gridfs::PutPlanRequest* Arena::CreateMaybeMessage<::gridfs::PutPlanRequest>(Arena*);
template<> ::gridfs::PutPlanResponse* Arena::CreateMaybeMessage<::gridfs::PutPlanResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gridfs {

// ===================================================================

class PutPlanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gridfs.PutPlanRequest) */ {
 public:
  inline PutPlanRequest() : PutPlanRequest(nullptr) {}
  ~PutPlanRequest() override;
  explicit PROTOBUF_CONSTEXPR PutPlanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutPlanRequest(const PutPlanRequest& from);
  PutPlanRequest(PutPlanRequest&& from) noexcept
    : PutPlanRequest() {
    *this = ::std::move(from);
  }

  inline PutPlanRequest& operator=(const PutPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutPlanRequest& operator=(PutPlanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutPlanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutPlanRequest* internal_default_instance() {
    return reinterpret_cast<const PutPlanRequest*>(
               &_PutPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PutPlanRequest& a, PutPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutPlanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutPlanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutPlanRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutPlanRequest& from) {
    PutPlanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutPlanRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gridfs.PutPlanRequest";
  }
  protected:
  explicit PutPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFilesizeFieldNumber = 2,
    kBlockSizeFieldNumber = 3,
    kReplicationFieldNumber = 4,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int64 filesize = 2;
  void clear_filesize();
  int64_t filesize() const;
  void set_filesize(int64_t value);
  private:
  int64_t _internal_filesize() const;
  void _internal_set_filesize(int64_t value);
  public:

  // int32 block_size = 3;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 replication = 4;
  void clear_replication();
  int32_t replication() const;
  void set_replication(int32_t value);
  private:
  int32_t _internal_replication() const;
  void _internal_set_replication(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gridfs.PutPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    int64_t filesize_;
    int32_t block_size_;
    int32_t replication_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class PutPlanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gridfs.PutPlanResponse) */ {
 public:
  inline PutPlanResponse() : PutPlanResponse(nullptr) {}
  ~PutPlanResponse() override;
  explicit PROTOBUF_CONSTEXPR PutPlanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutPlanResponse(const PutPlanResponse& from);
  PutPlanResponse(PutPlanResponse&& from) noexcept
    : PutPlanResponse() {
    *this = ::std::move(from);
  }

  inline PutPlanResponse& operator=(const PutPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutPlanResponse& operator=(PutPlanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutPlanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutPlanResponse* internal_default_instance() {
    return reinterpret_cast<const PutPlanResponse*>(
               &_PutPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PutPlanResponse& a, PutPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutPlanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutPlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutPlanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutPlanResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutPlanResponse& from) {
    PutPlanResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutPlanResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gridfs.PutPlanResponse";
  }
  protected:
  explicit PutPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 1,
  };
  // repeated .gridfs.BlockAssignment assignments = 1;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::gridfs::BlockAssignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockAssignment >*
      mutable_assignments();
  private:
  const ::gridfs::BlockAssignment& _internal_assignments(int index) const;
  ::gridfs::BlockAssignment* _internal_add_assignments();
  public:
  const ::gridfs::BlockAssignment& assignments(int index) const;
  ::gridfs::BlockAssignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockAssignment >&
      assignments() const;

  // @@protoc_insertion_point(class_scope:gridfs.PutPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockAssignment > assignments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetPlanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gridfs.GetPlanRequest) */ {
 public:
  inline GetPlanRequest() : GetPlanRequest(nullptr) {}
  ~GetPlanRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPlanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPlanRequest(const GetPlanRequest& from);
  GetPlanRequest(GetPlanRequest&& from) noexcept
    : GetPlanRequest() {
    *this = ::std::move(from);
  }

  inline GetPlanRequest& operator=(const GetPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlanRequest& operator=(GetPlanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPlanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPlanRequest* internal_default_instance() {
    return reinterpret_cast<const GetPlanRequest*>(
               &_GetPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPlanRequest& a, GetPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPlanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPlanRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPlanRequest& from) {
    GetPlanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlanRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gridfs.GetPlanRequest";
  }
  protected:
  explicit GetPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:gridfs.GetPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetPlanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gridfs.GetPlanResponse) */ {
 public:
  inline GetPlanResponse() : GetPlanResponse(nullptr) {}
  ~GetPlanResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPlanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPlanResponse(const GetPlanResponse& from);
  GetPlanResponse(GetPlanResponse&& from) noexcept
    : GetPlanResponse() {
    *this = ::std::move(from);
  }

  inline GetPlanResponse& operator=(const GetPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlanResponse& operator=(GetPlanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPlanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPlanResponse* internal_default_instance() {
    return reinterpret_cast<const GetPlanResponse*>(
               &_GetPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPlanResponse& a, GetPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPlanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPlanResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPlanResponse& from) {
    GetPlanResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlanResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gridfs.GetPlanResponse";
  }
  protected:
  explicit GetPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
  };
  // repeated .gridfs.BlockLocation locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::gridfs::BlockLocation* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockLocation >*
      mutable_locations();
  private:
  const ::gridfs::BlockLocation& _internal_locations(int index) const;
  ::gridfs::BlockLocation* _internal_add_locations();
  public:
  const ::gridfs::BlockLocation& locations(int index) const;
  ::gridfs::BlockLocation* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockLocation >&
      locations() const;

  // @@protoc_insertion_point(class_scope:gridfs.GetPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockLocation > locations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_master_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutPlanRequest

// string filename = 1;
inline void PutPlanRequest::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& PutPlanRequest::filename() const {
  // @@protoc_insertion_point(field_get:gridfs.PutPlanRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutPlanRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gridfs.PutPlanRequest.filename)
}
inline std::string* PutPlanRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:gridfs.PutPlanRequest.filename)
  return _s;
}
inline const std::string& PutPlanRequest::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void PutPlanRequest::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* PutPlanRequest::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* PutPlanRequest::release_filename() {
  // @@protoc_insertion_point(field_release:gridfs.PutPlanRequest.filename)
  return _impl_.filename_.Release();
}
inline void PutPlanRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gridfs.PutPlanRequest.filename)
}

// int64 filesize = 2;
inline void PutPlanRequest::clear_filesize() {
  _impl_.filesize_ = int64_t{0};
}
inline int64_t PutPlanRequest::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int64_t PutPlanRequest::filesize() const {
  // @@protoc_insertion_point(field_get:gridfs.PutPlanRequest.filesize)
  return _internal_filesize();
}
inline void PutPlanRequest::_internal_set_filesize(int64_t value) {
  
  _impl_.filesize_ = value;
}
inline void PutPlanRequest::set_filesize(int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:gridfs.PutPlanRequest.filesize)
}

// int32 block_size = 3;
inline void PutPlanRequest::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t PutPlanRequest::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t PutPlanRequest::block_size() const {
  // @@protoc_insertion_point(field_get:gridfs.PutPlanRequest.block_size)
  return _internal_block_size();
}
inline void PutPlanRequest::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void PutPlanRequest::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:gridfs.PutPlanRequest.block_size)
}

// int32 replication = 4;
inline void PutPlanRequest::clear_replication() {
  _impl_.replication_ = 0;
}
inline int32_t PutPlanRequest::_internal_replication() const {
  return _impl_.replication_;
}
inline int32_t PutPlanRequest::replication() const {
  // @@protoc_insertion_point(field_get:gridfs.PutPlanRequest.replication)
  return _internal_replication();
}
inline void PutPlanRequest::_internal_set_replication(int32_t value) {
  
  _impl_.replication_ = value;
}
inline void PutPlanRequest::set_replication(int32_t value) {
  _internal_set_replication(value);
  // @@protoc_insertion_point(field_set:gridfs.PutPlanRequest.replication)
}

// -------------------------------------------------------------------

// PutPlanResponse

// repeated .gridfs.BlockAssignment assignments = 1;
inline int PutPlanResponse::_internal_assignments_size() const {
  return _impl_.assignments_.size();
}
inline int PutPlanResponse::assignments_size() const {
  return _internal_assignments_size();
}
inline ::gridfs::BlockAssignment* PutPlanResponse::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:gridfs.PutPlanResponse.assignments)
  return _impl_.assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockAssignment >*
PutPlanResponse::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:gridfs.PutPlanResponse.assignments)
  return &_impl_.assignments_;
}
inline const ::gridfs::BlockAssignment& PutPlanResponse::_internal_assignments(int index) const {
  return _impl_.assignments_.Get(index);
}
inline const ::gridfs::BlockAssignment& PutPlanResponse::assignments(int index) const {
  // @@protoc_insertion_point(field_get:gridfs.PutPlanResponse.assignments)
  return _internal_assignments(index);
}
inline ::gridfs::BlockAssignment* PutPlanResponse::_internal_add_assignments() {
  return _impl_.assignments_.Add();
}
inline ::gridfs::BlockAssignment* PutPlanResponse::add_assignments() {
  ::gridfs::BlockAssignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:gridfs.PutPlanResponse.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockAssignment >&
PutPlanResponse::assignments() const {
  // @@protoc_insertion_point(field_list:gridfs.PutPlanResponse.assignments)
  return _impl_.assignments_;
}

// -------------------------------------------------------------------

// GetPlanRequest

// string filename = 1;
inline void GetPlanRequest::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& GetPlanRequest::filename() const {
  // @@protoc_insertion_point(field_get:gridfs.GetPlanRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPlanRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gridfs.GetPlanRequest.filename)
}
inline std::string* GetPlanRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:gridfs.GetPlanRequest.filename)
  return _s;
}
inline const std::string& GetPlanRequest::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void GetPlanRequest::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPlanRequest::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPlanRequest::release_filename() {
  // @@protoc_insertion_point(field_release:gridfs.GetPlanRequest.filename)
  return _impl_.filename_.Release();
}
inline void GetPlanRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gridfs.GetPlanRequest.filename)
}

// -------------------------------------------------------------------

// GetPlanResponse

// repeated .gridfs.BlockLocation locations = 1;
inline int GetPlanResponse::_internal_locations_size() const {
  return _impl_.locations_.size();
}
inline int GetPlanResponse::locations_size() const {
  return _internal_locations_size();
}
inline ::gridfs::BlockLocation* GetPlanResponse::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:gridfs.GetPlanResponse.locations)
  return _impl_.locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockLocation >*
GetPlanResponse::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:gridfs.GetPlanResponse.locations)
  return &_impl_.locations_;
}
inline const ::gridfs::BlockLocation& GetPlanResponse::_internal_locations(int index) const {
  return _impl_.locations_.Get(index);
}
inline const ::gridfs::BlockLocation& GetPlanResponse::locations(int index) const {
  // @@protoc_insertion_point(field_get:gridfs.GetPlanResponse.locations)
  return _internal_locations(index);
}
inline ::gridfs::BlockLocation* GetPlanResponse::_internal_add_locations() {
  return _impl_.locations_.Add();
}
inline ::gridfs::BlockLocation* GetPlanResponse::add_locations() {
  ::gridfs::BlockLocation* _add = _internal_add_locations();
  // @@protoc_insertion_point(field_add:gridfs.GetPlanResponse.locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gridfs::BlockLocation >&
GetPlanResponse::locations() const {
  // @@protoc_insertion_point(field_list:gridfs.GetPlanResponse.locations)
  return _impl_.locations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gridfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_master_2eproto
