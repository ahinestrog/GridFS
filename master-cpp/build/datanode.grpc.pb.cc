// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode.proto

#include "datanode.pb.h"
#include "datanode.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gridfs {

static const char* DataNodeIO_method_names[] = {
  "/gridfs.DataNodeIO/WriteBlock",
  "/gridfs.DataNodeIO/ReadBlock",
  "/gridfs.DataNodeIO/FsOp",
};

std::unique_ptr< DataNodeIO::Stub> DataNodeIO::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataNodeIO::Stub> stub(new DataNodeIO::Stub(channel, options));
  return stub;
}

DataNodeIO::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WriteBlock_(DataNodeIO_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ReadBlock_(DataNodeIO_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FsOp_(DataNodeIO_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::gridfs::BlockChunk>* DataNodeIO::Stub::WriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
  return ::grpc::internal::ClientWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), rpcmethod_WriteBlock_, context, response);
}

void DataNodeIO::Stub::async::WriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::gridfs::BlockChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_WriteBlock_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* DataNodeIO::Stub::AsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* DataNodeIO::Stub::PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, response, false, nullptr);
}

::grpc::ClientReader< ::gridfs::BlockChunk>* DataNodeIO::Stub::ReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request) {
  return ::grpc::internal::ClientReaderFactory< ::gridfs::BlockChunk>::Create(channel_.get(), rpcmethod_ReadBlock_, context, request);
}

void DataNodeIO::Stub::async::ReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId* request, ::grpc::ClientReadReactor< ::gridfs::BlockChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gridfs::BlockChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadBlock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gridfs::BlockChunk>* DataNodeIO::Stub::AsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gridfs::BlockChunk>* DataNodeIO::Stub::PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, false, nullptr);
}

::grpc::Status DataNodeIO::Stub::FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::gridfs::FsOpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridfs::FsOpRequest, ::gridfs::FsOpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FsOp_, context, request, response);
}

void DataNodeIO::Stub::async::FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridfs::FsOpRequest, ::gridfs::FsOpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FsOp_, context, request, response, std::move(f));
}

void DataNodeIO::Stub::async::FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FsOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>* DataNodeIO::Stub::PrepareAsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridfs::FsOpResponse, ::gridfs::FsOpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FsOp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>* DataNodeIO::Stub::AsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFsOpRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataNodeIO::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeIO_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DataNodeIO::Service, ::gridfs::BlockChunk, ::gridfs::WriteAck>(
          [](DataNodeIO::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::gridfs::BlockChunk>* reader,
             ::gridfs::WriteAck* resp) {
               return service->WriteBlock(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeIO_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DataNodeIO::Service, ::gridfs::BlockId, ::gridfs::BlockChunk>(
          [](DataNodeIO::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridfs::BlockId* req,
             ::grpc::ServerWriter<::gridfs::BlockChunk>* writer) {
               return service->ReadBlock(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeIO_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeIO::Service, ::gridfs::FsOpRequest, ::gridfs::FsOpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeIO::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridfs::FsOpRequest* req,
             ::gridfs::FsOpResponse* resp) {
               return service->FsOp(ctx, req, resp);
             }, this)));
}

DataNodeIO::Service::~Service() {
}

::grpc::Status DataNodeIO::Service::WriteBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridfs::BlockChunk>* reader, ::gridfs::WriteAck* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeIO::Service::ReadBlock(::grpc::ServerContext* context, const ::gridfs::BlockId* request, ::grpc::ServerWriter< ::gridfs::BlockChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeIO::Service::FsOp(::grpc::ServerContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReplicationService_method_names[] = {
  "/gridfs.ReplicationService/PushBlock",
};

std::unique_ptr< ReplicationService::Stub> ReplicationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReplicationService::Stub> stub(new ReplicationService::Stub(channel, options));
  return stub;
}

ReplicationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PushBlock_(ReplicationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::gridfs::BlockChunk>* ReplicationService::Stub::PushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
  return ::grpc::internal::ClientWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), rpcmethod_PushBlock_, context, response);
}

void ReplicationService::Stub::async::PushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::gridfs::BlockChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_PushBlock_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* ReplicationService::Stub::AsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_PushBlock_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* ReplicationService::Stub::PrepareAsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridfs::BlockChunk>::Create(channel_.get(), cq, rpcmethod_PushBlock_, context, response, false, nullptr);
}

ReplicationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ReplicationService::Service, ::gridfs::BlockChunk, ::gridfs::WriteAck>(
          [](ReplicationService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::gridfs::BlockChunk>* reader,
             ::gridfs::WriteAck* resp) {
               return service->PushBlock(ctx, reader, resp);
             }, this)));
}

ReplicationService::Service::~Service() {
}

::grpc::Status ReplicationService::Service::PushBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridfs::BlockChunk>* reader, ::gridfs::WriteAck* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gridfs

