// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: master.proto
#ifndef GRPC_master_2eproto__INCLUDED
#define GRPC_master_2eproto__INCLUDED

#include "master.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gridfs {

class MasterService final {
 public:
  static constexpr char const* service_full_name() {
    return "gridfs.MasterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::gridfs::PutPlanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>> AsyncPutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>>(AsyncPutPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>> PrepareAsyncPutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>>(PrepareAsyncPutPlanRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::gridfs::GetPlanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>> AsyncGetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>>(AsyncGetPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>> PrepareAsyncGetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>>(PrepareAsyncGetPlanRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>* AsyncPutPlanRaw(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::PutPlanResponse>* PrepareAsyncPutPlanRaw(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>* AsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::GetPlanResponse>* PrepareAsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::gridfs::PutPlanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>> AsyncPutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>>(AsyncPutPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>> PrepareAsyncPutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>>(PrepareAsyncPutPlanRaw(context, request, cq));
    }
    ::grpc::Status GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::gridfs::GetPlanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>> AsyncGetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>>(AsyncGetPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>> PrepareAsyncGetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>>(PrepareAsyncGetPlanRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response, std::function<void(::grpc::Status)>) override;
      void PutPlan(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>* AsyncPutPlanRaw(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridfs::PutPlanResponse>* PrepareAsyncPutPlanRaw(::grpc::ClientContext* context, const ::gridfs::PutPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>* AsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>* PrepareAsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PutPlan_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPlan_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PutPlan(::grpc::ServerContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response);
    virtual ::grpc::Status GetPlan(::grpc::ServerContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutPlan() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutPlan(::grpc::ServerContext* context, ::gridfs::PutPlanRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridfs::PutPlanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPlan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlan(::grpc::ServerContext* context, ::gridfs::GetPlanRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridfs::GetPlanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PutPlan<WithAsyncMethod_GetPlan<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutPlan() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gridfs::PutPlanRequest, ::gridfs::PutPlanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridfs::PutPlanRequest* request, ::gridfs::PutPlanResponse* response) { return this->PutPlan(context, request, response); }));}
    void SetMessageAllocatorFor_PutPlan(
        ::grpc::MessageAllocator< ::gridfs::PutPlanRequest, ::gridfs::PutPlanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridfs::PutPlanRequest, ::gridfs::PutPlanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPlan() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response) { return this->GetPlan(context, request, response); }));}
    void SetMessageAllocatorFor_GetPlan(
        ::grpc::MessageAllocator< ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PutPlan<WithCallbackMethod_GetPlan<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutPlan() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPlan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutPlan() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutPlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPlan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutPlan() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutPlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPlan() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutPlan() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridfs::PutPlanRequest, ::gridfs::PutPlanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridfs::PutPlanRequest, ::gridfs::PutPlanResponse>* streamer) {
                       return this->StreamedPutPlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutPlan(::grpc::ServerContext* /*context*/, const ::gridfs::PutPlanRequest* /*request*/, ::gridfs::PutPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutPlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridfs::PutPlanRequest,::gridfs::PutPlanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPlan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse>* streamer) {
                       return this->StreamedGetPlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPlan(::grpc::ServerContext* /*context*/, const ::gridfs::GetPlanRequest* /*request*/, ::gridfs::GetPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridfs::GetPlanRequest,::gridfs::GetPlanResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PutPlan<WithStreamedUnaryMethod_GetPlan<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PutPlan<WithStreamedUnaryMethod_GetPlan<Service > > StreamedService;
};

// Master <-> DataNode (bidi) para heartbeats
class MasterHeartbeat final {
 public:
  static constexpr char const* service_full_name() {
    return "gridfs.MasterHeartbeat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> StreamStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(StreamStatusRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> AsyncStreamStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(AsyncStreamStatusRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> PrepareAsyncStreamStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(PrepareAsyncStreamStatusRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StreamStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::gridfs::HeartbeatKv,::gridfs::HeartbeatAck>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* StreamStatusRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* AsyncStreamStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* PrepareAsyncStreamStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> StreamStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(StreamStatusRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> AsyncStreamStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(AsyncStreamStatusRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>> PrepareAsyncStreamStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>>(PrepareAsyncStreamStatusRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StreamStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::gridfs::HeartbeatKv,::gridfs::HeartbeatAck>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* StreamStatusRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* AsyncStreamStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* PrepareAsyncStreamStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StreamStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamStatus<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StreamStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamStatus(context); }));
    }
    ~WithCallbackMethod_StreamStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::gridfs::HeartbeatKv, ::gridfs::HeartbeatAck>* StreamStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_StreamStatus<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamStatus(context); }));
    }
    ~WithRawCallbackMethod_StreamStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gridfs::HeartbeatAck, ::gridfs::HeartbeatKv>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace gridfs


#endif  // GRPC_master_2eproto__INCLUDED
