// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#include "admin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gridfs {
PROTOBUF_CONSTEXPR ReplicateCmd::ReplicateCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_dn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplicateCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicateCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicateCmdDefaultTypeInternal() {}
  union {
    ReplicateCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicateCmdDefaultTypeInternal _ReplicateCmd_default_instance_;
PROTOBUF_CONSTEXPR DeleteBlockCmd::DeleteBlockCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteBlockCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBlockCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBlockCmdDefaultTypeInternal() {}
  union {
    DeleteBlockCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBlockCmdDefaultTypeInternal _DeleteBlockCmd_default_instance_;
PROTOBUF_CONSTEXPR AdminOrderRequest::AdminOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AdminOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminOrderRequestDefaultTypeInternal() {}
  union {
    AdminOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminOrderRequestDefaultTypeInternal _AdminOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR AdminOrderResponse::AdminOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdminOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminOrderResponseDefaultTypeInternal() {}
  union {
    AdminOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminOrderResponseDefaultTypeInternal _AdminOrderResponse_default_instance_;
}  // namespace gridfs
static ::_pb::Metadata file_level_metadata_admin_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_admin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_admin_2eproto = nullptr;

const uint32_t TableStruct_admin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::ReplicateCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::ReplicateCmd, _impl_.block_id_),
  PROTOBUF_FIELD_OFFSET(::gridfs::ReplicateCmd, _impl_.target_dn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::DeleteBlockCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::DeleteBlockCmd, _impl_.block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderRequest, _impl_.node_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderRequest, _impl_.order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderResponse, _impl_.ok_),
  PROTOBUF_FIELD_OFFSET(::gridfs::AdminOrderResponse, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gridfs::ReplicateCmd)},
  { 8, -1, -1, sizeof(::gridfs::DeleteBlockCmd)},
  { 15, -1, -1, sizeof(::gridfs::AdminOrderRequest)},
  { 25, -1, -1, sizeof(::gridfs::AdminOrderResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gridfs::_ReplicateCmd_default_instance_._instance,
  &::gridfs::_DeleteBlockCmd_default_instance_._instance,
  &::gridfs::_AdminOrderRequest_default_instance_._instance,
  &::gridfs::_AdminOrderResponse_default_instance_._instance,
};

const char descriptor_table_protodef_admin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013admin.proto\022\006gridfs\"3\n\014ReplicateCmd\022\020\n"
  "\010block_id\030\001 \001(\t\022\021\n\ttarget_dn\030\002 \001(\t\"\"\n\016De"
  "leteBlockCmd\022\020\n\010block_id\030\001 \001(\t\"\210\001\n\021Admin"
  "OrderRequest\022\017\n\007node_id\030\001 \001(\t\022)\n\treplica"
  "te\030\002 \001(\0132\024.gridfs.ReplicateCmdH\000\022.\n\014dele"
  "te_block\030\003 \001(\0132\026.gridfs.DeleteBlockCmdH\000"
  "B\007\n\005order\"1\n\022AdminOrderResponse\022\n\n\002ok\030\001 "
  "\001(\010\022\017\n\007message\030\002 \001(\t2T\n\rDataNodeAdmin\022C\n"
  "\nAdminOrder\022\031.gridfs.AdminOrderRequest\032\032"
  ".gridfs.AdminOrderResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_admin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_admin_2eproto = {
    false, false, 394, descriptor_table_protodef_admin_2eproto,
    "admin.proto",
    &descriptor_table_admin_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_admin_2eproto::offsets,
    file_level_metadata_admin_2eproto, file_level_enum_descriptors_admin_2eproto,
    file_level_service_descriptors_admin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_admin_2eproto_getter() {
  return &descriptor_table_admin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_admin_2eproto(&descriptor_table_admin_2eproto);
namespace gridfs {

// ===================================================================

class ReplicateCmd::_Internal {
 public:
};

ReplicateCmd::ReplicateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.ReplicateCmd)
}
ReplicateCmd::ReplicateCmd(const ReplicateCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicateCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_id_){}
    , decltype(_impl_.target_dn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_id().empty()) {
    _this->_impl_.block_id_.Set(from._internal_block_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_dn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_dn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_dn().empty()) {
    _this->_impl_.target_dn_.Set(from._internal_target_dn(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gridfs.ReplicateCmd)
}

inline void ReplicateCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_id_){}
    , decltype(_impl_.target_dn_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_dn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_dn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplicateCmd::~ReplicateCmd() {
  // @@protoc_insertion_point(destructor:gridfs.ReplicateCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplicateCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_id_.Destroy();
  _impl_.target_dn_.Destroy();
}

void ReplicateCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicateCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.ReplicateCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_id_.ClearToEmpty();
  _impl_.target_dn_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicateCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.ReplicateCmd.block_id"));
        } else
          goto handle_unusual;
        continue;
      // string target_dn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_dn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.ReplicateCmd.target_dn"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicateCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.ReplicateCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_id = 1;
  if (!this->_internal_block_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_id().data(), static_cast<int>(this->_internal_block_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.ReplicateCmd.block_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // string target_dn = 2;
  if (!this->_internal_target_dn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_dn().data(), static_cast<int>(this->_internal_target_dn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.ReplicateCmd.target_dn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_dn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.ReplicateCmd)
  return target;
}

size_t ReplicateCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.ReplicateCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_id());
  }

  // string target_dn = 2;
  if (!this->_internal_target_dn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_dn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicateCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicateCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicateCmd::GetClassData() const { return &_class_data_; }


void ReplicateCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicateCmd*>(&to_msg);
  auto& from = static_cast<const ReplicateCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.ReplicateCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _this->_internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_target_dn().empty()) {
    _this->_internal_set_target_dn(from._internal_target_dn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicateCmd::CopyFrom(const ReplicateCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.ReplicateCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateCmd::IsInitialized() const {
  return true;
}

void ReplicateCmd::InternalSwap(ReplicateCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_id_, lhs_arena,
      &other->_impl_.block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_dn_, lhs_arena,
      &other->_impl_.target_dn_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_admin_2eproto_getter, &descriptor_table_admin_2eproto_once,
      file_level_metadata_admin_2eproto[0]);
}

// ===================================================================

class DeleteBlockCmd::_Internal {
 public:
};

DeleteBlockCmd::DeleteBlockCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.DeleteBlockCmd)
}
DeleteBlockCmd::DeleteBlockCmd(const DeleteBlockCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteBlockCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_id().empty()) {
    _this->_impl_.block_id_.Set(from._internal_block_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gridfs.DeleteBlockCmd)
}

inline void DeleteBlockCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteBlockCmd::~DeleteBlockCmd() {
  // @@protoc_insertion_point(destructor:gridfs.DeleteBlockCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBlockCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_id_.Destroy();
}

void DeleteBlockCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteBlockCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.DeleteBlockCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBlockCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.DeleteBlockCmd.block_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBlockCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.DeleteBlockCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_id = 1;
  if (!this->_internal_block_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_id().data(), static_cast<int>(this->_internal_block_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.DeleteBlockCmd.block_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.DeleteBlockCmd)
  return target;
}

size_t DeleteBlockCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.DeleteBlockCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBlockCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteBlockCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBlockCmd::GetClassData() const { return &_class_data_; }


void DeleteBlockCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteBlockCmd*>(&to_msg);
  auto& from = static_cast<const DeleteBlockCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.DeleteBlockCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _this->_internal_set_block_id(from._internal_block_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBlockCmd::CopyFrom(const DeleteBlockCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.DeleteBlockCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlockCmd::IsInitialized() const {
  return true;
}

void DeleteBlockCmd::InternalSwap(DeleteBlockCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_id_, lhs_arena,
      &other->_impl_.block_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBlockCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_admin_2eproto_getter, &descriptor_table_admin_2eproto_once,
      file_level_metadata_admin_2eproto[1]);
}

// ===================================================================

class AdminOrderRequest::_Internal {
 public:
  static const ::gridfs::ReplicateCmd& replicate(const AdminOrderRequest* msg);
  static const ::gridfs::DeleteBlockCmd& delete_block(const AdminOrderRequest* msg);
};

const ::gridfs::ReplicateCmd&
AdminOrderRequest::_Internal::replicate(const AdminOrderRequest* msg) {
  return *msg->_impl_.order_.replicate_;
}
const ::gridfs::DeleteBlockCmd&
AdminOrderRequest::_Internal::delete_block(const AdminOrderRequest* msg) {
  return *msg->_impl_.order_.delete_block_;
}
void AdminOrderRequest::set_allocated_replicate(::gridfs::ReplicateCmd* replicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_order();
  if (replicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicate);
    if (message_arena != submessage_arena) {
      replicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicate, submessage_arena);
    }
    set_has_replicate();
    _impl_.order_.replicate_ = replicate;
  }
  // @@protoc_insertion_point(field_set_allocated:gridfs.AdminOrderRequest.replicate)
}
void AdminOrderRequest::set_allocated_delete_block(::gridfs::DeleteBlockCmd* delete_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_order();
  if (delete_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_block);
    if (message_arena != submessage_arena) {
      delete_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_block, submessage_arena);
    }
    set_has_delete_block();
    _impl_.order_.delete_block_ = delete_block;
  }
  // @@protoc_insertion_point(field_set_allocated:gridfs.AdminOrderRequest.delete_block)
}
AdminOrderRequest::AdminOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.AdminOrderRequest)
}
AdminOrderRequest::AdminOrderRequest(const AdminOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.order_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_order();
  switch (from.order_case()) {
    case kReplicate: {
      _this->_internal_mutable_replicate()->::gridfs::ReplicateCmd::MergeFrom(
          from._internal_replicate());
      break;
    }
    case kDeleteBlock: {
      _this->_internal_mutable_delete_block()->::gridfs::DeleteBlockCmd::MergeFrom(
          from._internal_delete_block());
      break;
    }
    case ORDER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gridfs.AdminOrderRequest)
}

inline void AdminOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.order_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_order();
}

AdminOrderRequest::~AdminOrderRequest() {
  // @@protoc_insertion_point(destructor:gridfs.AdminOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  if (has_order()) {
    clear_order();
  }
}

void AdminOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminOrderRequest::clear_order() {
// @@protoc_insertion_point(one_of_clear_start:gridfs.AdminOrderRequest)
  switch (order_case()) {
    case kReplicate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.order_.replicate_;
      }
      break;
    }
    case kDeleteBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.order_.delete_block_;
      }
      break;
    }
    case ORDER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ORDER_NOT_SET;
}


void AdminOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.AdminOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  clear_order();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.AdminOrderRequest.node_id"));
        } else
          goto handle_unusual;
        continue;
      // .gridfs.ReplicateCmd replicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gridfs.DeleteBlockCmd delete_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.AdminOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.AdminOrderRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // .gridfs.ReplicateCmd replicate = 2;
  if (_internal_has_replicate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::replicate(this),
        _Internal::replicate(this).GetCachedSize(), target, stream);
  }

  // .gridfs.DeleteBlockCmd delete_block = 3;
  if (_internal_has_delete_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::delete_block(this),
        _Internal::delete_block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.AdminOrderRequest)
  return target;
}

size_t AdminOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.AdminOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  switch (order_case()) {
    // .gridfs.ReplicateCmd replicate = 2;
    case kReplicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.order_.replicate_);
      break;
    }
    // .gridfs.DeleteBlockCmd delete_block = 3;
    case kDeleteBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.order_.delete_block_);
      break;
    }
    case ORDER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminOrderRequest::GetClassData() const { return &_class_data_; }


void AdminOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminOrderRequest*>(&to_msg);
  auto& from = static_cast<const AdminOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.AdminOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  switch (from.order_case()) {
    case kReplicate: {
      _this->_internal_mutable_replicate()->::gridfs::ReplicateCmd::MergeFrom(
          from._internal_replicate());
      break;
    }
    case kDeleteBlock: {
      _this->_internal_mutable_delete_block()->::gridfs::DeleteBlockCmd::MergeFrom(
          from._internal_delete_block());
      break;
    }
    case ORDER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminOrderRequest::CopyFrom(const AdminOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.AdminOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminOrderRequest::IsInitialized() const {
  return true;
}

void AdminOrderRequest::InternalSwap(AdminOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
  swap(_impl_.order_, other->_impl_.order_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_admin_2eproto_getter, &descriptor_table_admin_2eproto_once,
      file_level_metadata_admin_2eproto[2]);
}

// ===================================================================

class AdminOrderResponse::_Internal {
 public:
};

AdminOrderResponse::AdminOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gridfs.AdminOrderResponse)
}
AdminOrderResponse::AdminOrderResponse(const AdminOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:gridfs.AdminOrderResponse)
}

inline void AdminOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdminOrderResponse::~AdminOrderResponse() {
  // @@protoc_insertion_point(destructor:gridfs.AdminOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AdminOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gridfs.AdminOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gridfs.AdminOrderResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gridfs.AdminOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gridfs.AdminOrderResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gridfs.AdminOrderResponse)
  return target;
}

size_t AdminOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gridfs.AdminOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminOrderResponse::GetClassData() const { return &_class_data_; }


void AdminOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminOrderResponse*>(&to_msg);
  auto& from = static_cast<const AdminOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gridfs.AdminOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminOrderResponse::CopyFrom(const AdminOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gridfs.AdminOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminOrderResponse::IsInitialized() const {
  return true;
}

void AdminOrderResponse::InternalSwap(AdminOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_admin_2eproto_getter, &descriptor_table_admin_2eproto_once,
      file_level_metadata_admin_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gridfs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gridfs::ReplicateCmd*
Arena::CreateMaybeMessage< ::gridfs::ReplicateCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::ReplicateCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::DeleteBlockCmd*
Arena::CreateMaybeMessage< ::gridfs::DeleteBlockCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::DeleteBlockCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::AdminOrderRequest*
Arena::CreateMaybeMessage< ::gridfs::AdminOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::AdminOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gridfs::AdminOrderResponse*
Arena::CreateMaybeMessage< ::gridfs::AdminOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gridfs::AdminOrderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
