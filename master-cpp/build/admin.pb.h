// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_admin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_admin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_admin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_admin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_admin_2eproto;
namespace proto {
class AdminOrderRequest;
struct AdminOrderRequestDefaultTypeInternal;
extern AdminOrderRequestDefaultTypeInternal _AdminOrderRequest_default_instance_;
class AdminOrderResponse;
struct AdminOrderResponseDefaultTypeInternal;
extern AdminOrderResponseDefaultTypeInternal _AdminOrderResponse_default_instance_;
class DeleteBlockCmd;
struct DeleteBlockCmdDefaultTypeInternal;
extern DeleteBlockCmdDefaultTypeInternal _DeleteBlockCmd_default_instance_;
class ReplicateCmd;
struct ReplicateCmdDefaultTypeInternal;
extern ReplicateCmdDefaultTypeInternal _ReplicateCmd_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AdminOrderRequest* Arena::CreateMaybeMessage<::proto::AdminOrderRequest>(Arena*);
template<> ::proto::AdminOrderResponse* Arena::CreateMaybeMessage<::proto::AdminOrderResponse>(Arena*);
template<> ::proto::DeleteBlockCmd* Arena::CreateMaybeMessage<::proto::DeleteBlockCmd>(Arena*);
template<> ::proto::ReplicateCmd* Arena::CreateMaybeMessage<::proto::ReplicateCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ReplicateCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ReplicateCmd) */ {
 public:
  inline ReplicateCmd() : ReplicateCmd(nullptr) {}
  ~ReplicateCmd() override;
  explicit PROTOBUF_CONSTEXPR ReplicateCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicateCmd(const ReplicateCmd& from);
  ReplicateCmd(ReplicateCmd&& from) noexcept
    : ReplicateCmd() {
    *this = ::std::move(from);
  }

  inline ReplicateCmd& operator=(const ReplicateCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateCmd& operator=(ReplicateCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateCmd* internal_default_instance() {
    return reinterpret_cast<const ReplicateCmd*>(
               &_ReplicateCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplicateCmd& a, ReplicateCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicateCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicateCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicateCmd& from) {
    ReplicateCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicateCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReplicateCmd";
  }
  protected:
  explicit ReplicateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kTargetDnFieldNumber = 2,
  };
  // string block_id = 1;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_NODISCARD std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // string target_dn = 2;
  void clear_target_dn();
  const std::string& target_dn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_dn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_dn();
  PROTOBUF_NODISCARD std::string* release_target_dn();
  void set_allocated_target_dn(std::string* target_dn);
  private:
  const std::string& _internal_target_dn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_dn(const std::string& value);
  std::string* _internal_mutable_target_dn();
  public:

  // @@protoc_insertion_point(class_scope:proto.ReplicateCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_dn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class DeleteBlockCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteBlockCmd) */ {
 public:
  inline DeleteBlockCmd() : DeleteBlockCmd(nullptr) {}
  ~DeleteBlockCmd() override;
  explicit PROTOBUF_CONSTEXPR DeleteBlockCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBlockCmd(const DeleteBlockCmd& from);
  DeleteBlockCmd(DeleteBlockCmd&& from) noexcept
    : DeleteBlockCmd() {
    *this = ::std::move(from);
  }

  inline DeleteBlockCmd& operator=(const DeleteBlockCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBlockCmd& operator=(DeleteBlockCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBlockCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBlockCmd* internal_default_instance() {
    return reinterpret_cast<const DeleteBlockCmd*>(
               &_DeleteBlockCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteBlockCmd& a, DeleteBlockCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBlockCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBlockCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBlockCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBlockCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBlockCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteBlockCmd& from) {
    DeleteBlockCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBlockCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteBlockCmd";
  }
  protected:
  explicit DeleteBlockCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
  };
  // string block_id = 1;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_NODISCARD std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.DeleteBlockCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class AdminOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AdminOrderRequest) */ {
 public:
  inline AdminOrderRequest() : AdminOrderRequest(nullptr) {}
  ~AdminOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR AdminOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdminOrderRequest(const AdminOrderRequest& from);
  AdminOrderRequest(AdminOrderRequest&& from) noexcept
    : AdminOrderRequest() {
    *this = ::std::move(from);
  }

  inline AdminOrderRequest& operator=(const AdminOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminOrderRequest& operator=(AdminOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdminOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OrderCase {
    kReplicate = 2,
    kDeleteBlock = 3,
    ORDER_NOT_SET = 0,
  };

  static inline const AdminOrderRequest* internal_default_instance() {
    return reinterpret_cast<const AdminOrderRequest*>(
               &_AdminOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdminOrderRequest& a, AdminOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdminOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdminOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdminOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdminOrderRequest& from) {
    AdminOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AdminOrderRequest";
  }
  protected:
  explicit AdminOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kReplicateFieldNumber = 2,
    kDeleteBlockFieldNumber = 3,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .proto.ReplicateCmd replicate = 2;
  bool has_replicate() const;
  private:
  bool _internal_has_replicate() const;
  public:
  void clear_replicate();
  const ::proto::ReplicateCmd& replicate() const;
  PROTOBUF_NODISCARD ::proto::ReplicateCmd* release_replicate();
  ::proto::ReplicateCmd* mutable_replicate();
  void set_allocated_replicate(::proto::ReplicateCmd* replicate);
  private:
  const ::proto::ReplicateCmd& _internal_replicate() const;
  ::proto::ReplicateCmd* _internal_mutable_replicate();
  public:
  void unsafe_arena_set_allocated_replicate(
      ::proto::ReplicateCmd* replicate);
  ::proto::ReplicateCmd* unsafe_arena_release_replicate();

  // .proto.DeleteBlockCmd delete_block = 3;
  bool has_delete_block() const;
  private:
  bool _internal_has_delete_block() const;
  public:
  void clear_delete_block();
  const ::proto::DeleteBlockCmd& delete_block() const;
  PROTOBUF_NODISCARD ::proto::DeleteBlockCmd* release_delete_block();
  ::proto::DeleteBlockCmd* mutable_delete_block();
  void set_allocated_delete_block(::proto::DeleteBlockCmd* delete_block);
  private:
  const ::proto::DeleteBlockCmd& _internal_delete_block() const;
  ::proto::DeleteBlockCmd* _internal_mutable_delete_block();
  public:
  void unsafe_arena_set_allocated_delete_block(
      ::proto::DeleteBlockCmd* delete_block);
  ::proto::DeleteBlockCmd* unsafe_arena_release_delete_block();

  void clear_order();
  OrderCase order_case() const;
  // @@protoc_insertion_point(class_scope:proto.AdminOrderRequest)
 private:
  class _Internal;
  void set_has_replicate();
  void set_has_delete_block();

  inline bool has_order() const;
  inline void clear_has_order();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
    union OrderUnion {
      constexpr OrderUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::ReplicateCmd* replicate_;
      ::proto::DeleteBlockCmd* delete_block_;
    } order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class AdminOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AdminOrderResponse) */ {
 public:
  inline AdminOrderResponse() : AdminOrderResponse(nullptr) {}
  ~AdminOrderResponse() override;
  explicit PROTOBUF_CONSTEXPR AdminOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdminOrderResponse(const AdminOrderResponse& from);
  AdminOrderResponse(AdminOrderResponse&& from) noexcept
    : AdminOrderResponse() {
    *this = ::std::move(from);
  }

  inline AdminOrderResponse& operator=(const AdminOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminOrderResponse& operator=(AdminOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdminOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdminOrderResponse* internal_default_instance() {
    return reinterpret_cast<const AdminOrderResponse*>(
               &_AdminOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdminOrderResponse& a, AdminOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdminOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdminOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdminOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdminOrderResponse& from) {
    AdminOrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AdminOrderResponse";
  }
  protected:
  explicit AdminOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.AdminOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_admin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplicateCmd

// string block_id = 1;
inline void ReplicateCmd::clear_block_id() {
  _impl_.block_id_.ClearToEmpty();
}
inline const std::string& ReplicateCmd::block_id() const {
  // @@protoc_insertion_point(field_get:proto.ReplicateCmd.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicateCmd::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReplicateCmd.block_id)
}
inline std::string* ReplicateCmd::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:proto.ReplicateCmd.block_id)
  return _s;
}
inline const std::string& ReplicateCmd::_internal_block_id() const {
  return _impl_.block_id_.Get();
}
inline void ReplicateCmd::_internal_set_block_id(const std::string& value) {
  
  _impl_.block_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicateCmd::_internal_mutable_block_id() {
  
  return _impl_.block_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicateCmd::release_block_id() {
  // @@protoc_insertion_point(field_release:proto.ReplicateCmd.block_id)
  return _impl_.block_id_.Release();
}
inline void ReplicateCmd::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  _impl_.block_id_.SetAllocated(block_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_id_.IsDefault()) {
    _impl_.block_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReplicateCmd.block_id)
}

// string target_dn = 2;
inline void ReplicateCmd::clear_target_dn() {
  _impl_.target_dn_.ClearToEmpty();
}
inline const std::string& ReplicateCmd::target_dn() const {
  // @@protoc_insertion_point(field_get:proto.ReplicateCmd.target_dn)
  return _internal_target_dn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicateCmd::set_target_dn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_dn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReplicateCmd.target_dn)
}
inline std::string* ReplicateCmd::mutable_target_dn() {
  std::string* _s = _internal_mutable_target_dn();
  // @@protoc_insertion_point(field_mutable:proto.ReplicateCmd.target_dn)
  return _s;
}
inline const std::string& ReplicateCmd::_internal_target_dn() const {
  return _impl_.target_dn_.Get();
}
inline void ReplicateCmd::_internal_set_target_dn(const std::string& value) {
  
  _impl_.target_dn_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicateCmd::_internal_mutable_target_dn() {
  
  return _impl_.target_dn_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicateCmd::release_target_dn() {
  // @@protoc_insertion_point(field_release:proto.ReplicateCmd.target_dn)
  return _impl_.target_dn_.Release();
}
inline void ReplicateCmd::set_allocated_target_dn(std::string* target_dn) {
  if (target_dn != nullptr) {
    
  } else {
    
  }
  _impl_.target_dn_.SetAllocated(target_dn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_dn_.IsDefault()) {
    _impl_.target_dn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReplicateCmd.target_dn)
}

// -------------------------------------------------------------------

// DeleteBlockCmd

// string block_id = 1;
inline void DeleteBlockCmd::clear_block_id() {
  _impl_.block_id_.ClearToEmpty();
}
inline const std::string& DeleteBlockCmd::block_id() const {
  // @@protoc_insertion_point(field_get:proto.DeleteBlockCmd.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBlockCmd::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteBlockCmd.block_id)
}
inline std::string* DeleteBlockCmd::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:proto.DeleteBlockCmd.block_id)
  return _s;
}
inline const std::string& DeleteBlockCmd::_internal_block_id() const {
  return _impl_.block_id_.Get();
}
inline void DeleteBlockCmd::_internal_set_block_id(const std::string& value) {
  
  _impl_.block_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteBlockCmd::_internal_mutable_block_id() {
  
  return _impl_.block_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteBlockCmd::release_block_id() {
  // @@protoc_insertion_point(field_release:proto.DeleteBlockCmd.block_id)
  return _impl_.block_id_.Release();
}
inline void DeleteBlockCmd::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  _impl_.block_id_.SetAllocated(block_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_id_.IsDefault()) {
    _impl_.block_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteBlockCmd.block_id)
}

// -------------------------------------------------------------------

// AdminOrderRequest

// string node_id = 1;
inline void AdminOrderRequest::clear_node_id() {
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& AdminOrderRequest::node_id() const {
  // @@protoc_insertion_point(field_get:proto.AdminOrderRequest.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminOrderRequest::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AdminOrderRequest.node_id)
}
inline std::string* AdminOrderRequest::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:proto.AdminOrderRequest.node_id)
  return _s;
}
inline const std::string& AdminOrderRequest::_internal_node_id() const {
  return _impl_.node_id_.Get();
}
inline void AdminOrderRequest::_internal_set_node_id(const std::string& value) {
  
  _impl_.node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminOrderRequest::_internal_mutable_node_id() {
  
  return _impl_.node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminOrderRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:proto.AdminOrderRequest.node_id)
  return _impl_.node_id_.Release();
}
inline void AdminOrderRequest::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  _impl_.node_id_.SetAllocated(node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.AdminOrderRequest.node_id)
}

// .proto.ReplicateCmd replicate = 2;
inline bool AdminOrderRequest::_internal_has_replicate() const {
  return order_case() == kReplicate;
}
inline bool AdminOrderRequest::has_replicate() const {
  return _internal_has_replicate();
}
inline void AdminOrderRequest::set_has_replicate() {
  _impl_._oneof_case_[0] = kReplicate;
}
inline void AdminOrderRequest::clear_replicate() {
  if (_internal_has_replicate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.order_.replicate_;
    }
    clear_has_order();
  }
}
inline ::proto::ReplicateCmd* AdminOrderRequest::release_replicate() {
  // @@protoc_insertion_point(field_release:proto.AdminOrderRequest.replicate)
  if (_internal_has_replicate()) {
    clear_has_order();
    ::proto::ReplicateCmd* temp = _impl_.order_.replicate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.order_.replicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ReplicateCmd& AdminOrderRequest::_internal_replicate() const {
  return _internal_has_replicate()
      ? *_impl_.order_.replicate_
      : reinterpret_cast< ::proto::ReplicateCmd&>(::proto::_ReplicateCmd_default_instance_);
}
inline const ::proto::ReplicateCmd& AdminOrderRequest::replicate() const {
  // @@protoc_insertion_point(field_get:proto.AdminOrderRequest.replicate)
  return _internal_replicate();
}
inline ::proto::ReplicateCmd* AdminOrderRequest::unsafe_arena_release_replicate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AdminOrderRequest.replicate)
  if (_internal_has_replicate()) {
    clear_has_order();
    ::proto::ReplicateCmd* temp = _impl_.order_.replicate_;
    _impl_.order_.replicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdminOrderRequest::unsafe_arena_set_allocated_replicate(::proto::ReplicateCmd* replicate) {
  clear_order();
  if (replicate) {
    set_has_replicate();
    _impl_.order_.replicate_ = replicate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AdminOrderRequest.replicate)
}
inline ::proto::ReplicateCmd* AdminOrderRequest::_internal_mutable_replicate() {
  if (!_internal_has_replicate()) {
    clear_order();
    set_has_replicate();
    _impl_.order_.replicate_ = CreateMaybeMessage< ::proto::ReplicateCmd >(GetArenaForAllocation());
  }
  return _impl_.order_.replicate_;
}
inline ::proto::ReplicateCmd* AdminOrderRequest::mutable_replicate() {
  ::proto::ReplicateCmd* _msg = _internal_mutable_replicate();
  // @@protoc_insertion_point(field_mutable:proto.AdminOrderRequest.replicate)
  return _msg;
}

// .proto.DeleteBlockCmd delete_block = 3;
inline bool AdminOrderRequest::_internal_has_delete_block() const {
  return order_case() == kDeleteBlock;
}
inline bool AdminOrderRequest::has_delete_block() const {
  return _internal_has_delete_block();
}
inline void AdminOrderRequest::set_has_delete_block() {
  _impl_._oneof_case_[0] = kDeleteBlock;
}
inline void AdminOrderRequest::clear_delete_block() {
  if (_internal_has_delete_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.order_.delete_block_;
    }
    clear_has_order();
  }
}
inline ::proto::DeleteBlockCmd* AdminOrderRequest::release_delete_block() {
  // @@protoc_insertion_point(field_release:proto.AdminOrderRequest.delete_block)
  if (_internal_has_delete_block()) {
    clear_has_order();
    ::proto::DeleteBlockCmd* temp = _impl_.order_.delete_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.order_.delete_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::DeleteBlockCmd& AdminOrderRequest::_internal_delete_block() const {
  return _internal_has_delete_block()
      ? *_impl_.order_.delete_block_
      : reinterpret_cast< ::proto::DeleteBlockCmd&>(::proto::_DeleteBlockCmd_default_instance_);
}
inline const ::proto::DeleteBlockCmd& AdminOrderRequest::delete_block() const {
  // @@protoc_insertion_point(field_get:proto.AdminOrderRequest.delete_block)
  return _internal_delete_block();
}
inline ::proto::DeleteBlockCmd* AdminOrderRequest::unsafe_arena_release_delete_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AdminOrderRequest.delete_block)
  if (_internal_has_delete_block()) {
    clear_has_order();
    ::proto::DeleteBlockCmd* temp = _impl_.order_.delete_block_;
    _impl_.order_.delete_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdminOrderRequest::unsafe_arena_set_allocated_delete_block(::proto::DeleteBlockCmd* delete_block) {
  clear_order();
  if (delete_block) {
    set_has_delete_block();
    _impl_.order_.delete_block_ = delete_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AdminOrderRequest.delete_block)
}
inline ::proto::DeleteBlockCmd* AdminOrderRequest::_internal_mutable_delete_block() {
  if (!_internal_has_delete_block()) {
    clear_order();
    set_has_delete_block();
    _impl_.order_.delete_block_ = CreateMaybeMessage< ::proto::DeleteBlockCmd >(GetArenaForAllocation());
  }
  return _impl_.order_.delete_block_;
}
inline ::proto::DeleteBlockCmd* AdminOrderRequest::mutable_delete_block() {
  ::proto::DeleteBlockCmd* _msg = _internal_mutable_delete_block();
  // @@protoc_insertion_point(field_mutable:proto.AdminOrderRequest.delete_block)
  return _msg;
}

inline bool AdminOrderRequest::has_order() const {
  return order_case() != ORDER_NOT_SET;
}
inline void AdminOrderRequest::clear_has_order() {
  _impl_._oneof_case_[0] = ORDER_NOT_SET;
}
inline AdminOrderRequest::OrderCase AdminOrderRequest::order_case() const {
  return AdminOrderRequest::OrderCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdminOrderResponse

// bool ok = 1;
inline void AdminOrderResponse::clear_ok() {
  _impl_.ok_ = false;
}
inline bool AdminOrderResponse::_internal_ok() const {
  return _impl_.ok_;
}
inline bool AdminOrderResponse::ok() const {
  // @@protoc_insertion_point(field_get:proto.AdminOrderResponse.ok)
  return _internal_ok();
}
inline void AdminOrderResponse::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void AdminOrderResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:proto.AdminOrderResponse.ok)
}

// string message = 2;
inline void AdminOrderResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AdminOrderResponse::message() const {
  // @@protoc_insertion_point(field_get:proto.AdminOrderResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminOrderResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AdminOrderResponse.message)
}
inline std::string* AdminOrderResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.AdminOrderResponse.message)
  return _s;
}
inline const std::string& AdminOrderResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void AdminOrderResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminOrderResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminOrderResponse::release_message() {
  // @@protoc_insertion_point(field_release:proto.AdminOrderResponse.message)
  return _impl_.message_.Release();
}
inline void AdminOrderResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.AdminOrderResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_admin_2eproto
