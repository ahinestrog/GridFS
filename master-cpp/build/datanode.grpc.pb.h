// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode.proto
#ifndef GRPC_datanode_2eproto__INCLUDED
#define GRPC_datanode_2eproto__INCLUDED

#include "datanode.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gridfs {

// Cliente <-> DataNode
class DataNodeIO final {
 public:
  static constexpr char const* service_full_name() {
    return "gridfs.DataNodeIO";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>> WriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>>(WriteBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>> AsyncWriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>>(AsyncWriteBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>> PrepareAsyncWriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>>(PrepareAsyncWriteBlockRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gridfs::BlockChunk>> ReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gridfs::BlockChunk>>(ReadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>> AsyncReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>>(AsyncReadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>> PrepareAsyncReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>>(PrepareAsyncReadBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::gridfs::FsOpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>> AsyncFsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>>(AsyncFsOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>> PrepareAsyncFsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>>(PrepareAsyncFsOpRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void WriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) = 0;
      virtual void ReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId* request, ::grpc::ClientReadReactor< ::gridfs::BlockChunk>* reactor) = 0;
      virtual void FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>* WriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>* AsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>* PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gridfs::BlockChunk>* ReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>* AsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gridfs::BlockChunk>* PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>* AsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridfs::FsOpResponse>* PrepareAsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::gridfs::BlockChunk>> WriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::gridfs::BlockChunk>>(WriteBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>> AsyncWriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>>(AsyncWriteBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>> PrepareAsyncWriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>>(PrepareAsyncWriteBlockRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gridfs::BlockChunk>> ReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gridfs::BlockChunk>>(ReadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>> AsyncReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>>(AsyncReadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>> PrepareAsyncReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>>(PrepareAsyncReadBlockRaw(context, request, cq));
    }
    ::grpc::Status FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::gridfs::FsOpResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>> AsyncFsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>>(AsyncFsOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>> PrepareAsyncFsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>>(PrepareAsyncFsOpRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void WriteBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) override;
      void ReadBlock(::grpc::ClientContext* context, const ::gridfs::BlockId* request, ::grpc::ClientReadReactor< ::gridfs::BlockChunk>* reactor) override;
      void FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, std::function<void(::grpc::Status)>) override;
      void FsOp(::grpc::ClientContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::gridfs::BlockChunk>* WriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) override;
    ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* AsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::gridfs::BlockChunk>* ReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request) override;
    ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>* AsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gridfs::BlockChunk>* PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::gridfs::BlockId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>* AsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridfs::FsOpResponse>* PrepareAsyncFsOpRaw(::grpc::ClientContext* context, const ::gridfs::FsOpRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_WriteBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_FsOp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status WriteBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridfs::BlockChunk>* reader, ::gridfs::WriteAck* response);
    virtual ::grpc::Status ReadBlock(::grpc::ServerContext* context, const ::gridfs::BlockId* request, ::grpc::ServerWriter< ::gridfs::BlockChunk>* writer);
    virtual ::grpc::Status FsOp(::grpc::ServerContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteBlock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gridfs::WriteAck, ::gridfs::BlockChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadBlock(::grpc::ServerContext* context, ::gridfs::BlockId* request, ::grpc::ServerAsyncWriter< ::gridfs::BlockChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FsOp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFsOp(::grpc::ServerContext* context, ::gridfs::FsOpRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridfs::FsOpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_WriteBlock<WithAsyncMethod_ReadBlock<WithAsyncMethod_FsOp<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteBlock() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::gridfs::BlockChunk, ::gridfs::WriteAck>(
            [this](
                   ::grpc::CallbackServerContext* context, ::gridfs::WriteAck* response) { return this->WriteBlock(context, response); }));
    }
    ~WithCallbackMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::gridfs::BlockChunk>* WriteBlock(
      ::grpc::CallbackServerContext* /*context*/, ::gridfs::WriteAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gridfs::BlockId, ::gridfs::BlockChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridfs::BlockId* request) { return this->ReadBlock(context, request); }));
    }
    ~WithCallbackMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gridfs::BlockChunk>* ReadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::gridfs::BlockId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FsOp() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gridfs::FsOpRequest, ::gridfs::FsOpResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridfs::FsOpRequest* request, ::gridfs::FsOpResponse* response) { return this->FsOp(context, request, response); }));}
    void SetMessageAllocatorFor_FsOp(
        ::grpc::MessageAllocator< ::gridfs::FsOpRequest, ::gridfs::FsOpResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridfs::FsOpRequest, ::gridfs::FsOpResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FsOp(
      ::grpc::CallbackServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_WriteBlock<WithCallbackMethod_ReadBlock<WithCallbackMethod_FsOp<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteBlock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FsOp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteBlock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FsOp() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFsOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteBlock() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->WriteBlock(context, response); }));
    }
    ~WithRawCallbackMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* WriteBlock(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReadBlock(context, request); }));
    }
    ~WithRawCallbackMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FsOp() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FsOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FsOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FsOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FsOp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridfs::FsOpRequest, ::gridfs::FsOpResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridfs::FsOpRequest, ::gridfs::FsOpResponse>* streamer) {
                       return this->StreamedFsOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FsOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FsOp(::grpc::ServerContext* /*context*/, const ::gridfs::FsOpRequest* /*request*/, ::gridfs::FsOpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFsOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridfs::FsOpRequest,::gridfs::FsOpResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FsOp<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReadBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gridfs::BlockId, ::gridfs::BlockChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gridfs::BlockId, ::gridfs::BlockChunk>* streamer) {
                       return this->StreamedReadBlock(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::gridfs::BlockId* /*request*/, ::grpc::ServerWriter< ::gridfs::BlockChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReadBlock(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gridfs::BlockId,::gridfs::BlockChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReadBlock<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ReadBlock<WithStreamedUnaryMethod_FsOp<Service > > StreamedService;
};

// DataNode <-> DataNode
class ReplicationService final {
 public:
  static constexpr char const* service_full_name() {
    return "gridfs.ReplicationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>> PushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>>(PushBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>> AsyncPushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>>(AsyncPushBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>> PrepareAsyncPushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>>(PrepareAsyncPushBlockRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::gridfs::BlockChunk>* PushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>* AsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridfs::BlockChunk>* PrepareAsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::gridfs::BlockChunk>> PushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::gridfs::BlockChunk>>(PushBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>> AsyncPushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>>(AsyncPushBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>> PrepareAsyncPushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>>(PrepareAsyncPushBlockRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PushBlock(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::ClientWriteReactor< ::gridfs::BlockChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::gridfs::BlockChunk>* PushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response) override;
    ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* AsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::gridfs::BlockChunk>* PrepareAsyncPushBlockRaw(::grpc::ClientContext* context, ::gridfs::WriteAck* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridfs::BlockChunk>* reader, ::gridfs::WriteAck* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushBlock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gridfs::WriteAck, ::gridfs::BlockChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushBlock<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PushBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushBlock() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::gridfs::BlockChunk, ::gridfs::WriteAck>(
            [this](
                   ::grpc::CallbackServerContext* context, ::gridfs::WriteAck* response) { return this->PushBlock(context, response); }));
    }
    ~WithCallbackMethod_PushBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::gridfs::BlockChunk>* PushBlock(
      ::grpc::CallbackServerContext* /*context*/, ::gridfs::WriteAck* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PushBlock<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushBlock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushBlock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushBlock() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->PushBlock(context, response); }));
    }
    ~WithRawCallbackMethod_PushBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridfs::BlockChunk>* /*reader*/, ::gridfs::WriteAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PushBlock(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace gridfs


#endif  // GRPC_datanode_2eproto__INCLUDED
